{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7a10389b",
   "metadata": {},
   "source": [
    "## Flight Data Web Scraping"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89417004",
   "metadata": {},
   "source": [
    "### Project aimed at collecting information about flights' cancellations from FlightAware.com"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8571561",
   "metadata": {},
   "source": [
    "Installing all the packages required for the analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8d9f282b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pip in c:\\users\\fedef\\anaconda3\\lib\\site-packages (21.2.4)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install --upgrade pip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d6368f4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: msgpack in c:\\users\\fedef\\anaconda3\\lib\\site-packages (1.0.2)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install msgpack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "afd8c7e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: selenium in c:\\users\\fedef\\anaconda3\\lib\\site-packages (3.141.0)\n",
      "Requirement already satisfied: urllib3 in c:\\users\\fedef\\anaconda3\\lib\\site-packages (from selenium) (1.26.4)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install selenium"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "629c316a",
   "metadata": {},
   "source": [
    "Importing the required modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "fc58af91",
   "metadata": {},
   "outputs": [],
   "source": [
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.options import Options\n",
    "import time\n",
    "from datetime import date, timedelta"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b55f3fc8",
   "metadata": {},
   "source": [
    "Creating the link between Chrome, Cromedriver and Selenium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6487744a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-34-55324ea3f24f>:3: DeprecationWarning: use options instead of chrome_options\n",
      "  driver = webdriver.Chrome(chrome_options = options, executable_path=r'C:\\chromedriver\\chromedriver.exe')\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chrome Browser Invoked\n"
     ]
    }
   ],
   "source": [
    "options = Options()\n",
    "options.binary_location = \"C:\\Application Data\\Google\\Chrome\\Application\\chrome.exe\"\n",
    "driver = webdriver.Chrome(chrome_options = options, executable_path=r'C:\\chromedriver\\chromedriver.exe')\n",
    "driver.get('http://google.com/')\n",
    "print(\"Chrome Browser Invoked\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bab242e",
   "metadata": {},
   "source": [
    "Directing the Chromedriver towards the webpage of interest: FlightAware - Cancelled flights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "550596f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://uk.flightaware.com/live/cancelled/yesterday'\n",
    "driver.get(url)\n",
    "#setting a sleeping time to add delay in the execution of the program\n",
    "time.sleep(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c007b88d",
   "metadata": {},
   "source": [
    "Clicking accept on the cookies' widgets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "52246a58",
   "metadata": {},
   "outputs": [],
   "source": [
    "driver.find_element_by_css_selector('button.sc-ifAKCX.ljEJIv').click()\n",
    "time.sleep(3)\n",
    "\n",
    "driver.find_element_by_css_selector('span#cookieDisclaimerButtonText').click()\n",
    "time.sleep(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a25e2cf",
   "metadata": {},
   "source": [
    "Creating a list of all the airlines present in the main page of FlightAware.com"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "13c50b06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ok\n"
     ]
    }
   ],
   "source": [
    "#locating the table\n",
    "tables1 = driver.find_elements_by_id(\"airline-cancel-table\")\n",
    "\n",
    "for table in tables1:\n",
    "    print('ok')\n",
    "\n",
    "#finding the right classes in the html script and inserting them into an empty list\n",
    "all_rows1 = table.find_elements_by_class_name(\"smallrow1\")\n",
    "all_rows2 = table.find_elements_by_class_name(\"smallrow2\")\n",
    "\n",
    "all_rows = all_rows1+all_rows2\n",
    "\n",
    "airlines = []\n",
    "for table in tables1:\n",
    "    for row in all_rows:\n",
    "        for air in row.find_elements_by_tag_name('a'):\n",
    "            airlines.append(air.text)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cf6c2a7",
   "metadata": {},
   "source": [
    "The airline analized will be (all the ones in the website):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "21f546cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['China Eastern', 'American Airlines', 'Wings Air', 'Cape Air', 'Southwest', 'Lion Air', 'interCaribbean Airways', 'Saudia', 'Solaseed', 'Jeju Air', 'GoJet', 'Cayman Airways', 'SkyWest', 'IndiGo', 'Dalian Airlines', 'Azul Brazilian Airlines', 'Spirit', 'Volaris', 'Allegiant Air', 'Turkish Airlines', 'China Southern Airlines', 'Shanghai Airlines', 'GoAir', 'West Air', 'Vistara', 'SpiceJet', 'Asiana', 'PSA Airlines', 'Urumqi Air', 'Air Guilin', 'Porter', 'Tibet Airlines', 'JetBlue', 'Shandong Airlines', 'Juneyao Airlines', 'Envoy Air', 'Frontier', 'Beijing Capital Airlines', 'Japan Air Commuter', 'Nouvel Air Tunisie', 'LATAM Peru', 'Singapore Airlines', 'Ural', 'CommutAir', 'SCAT Airlines', 'WestJet', 'Jazz', 'Bangkok', 'Transportes Aeromar', 'Aerolineas Argentinas', 'Air China', 'Fuji Dream', 'Tianjin Airlines', 'Spring Airlines', 'Skymark', 'Sriwijaya Air', 'United', 'Air Wisconsin', 'StarFlyer', 'Mesa', 'Sichuan Airlines', 'Tway Air', 'Air Do', 'Air Inuit', 'Tropic Air', 'Air India', 'Unknown Owner', 'Air China Inner Mongolia', 'Air New Zealand', 'Pakistan International Airlines', 'Delta', 'Beijng Airlines', 'Flynas', 'Kunming Airlines', 'Zhejiang Loong', 'Seaborne', 'SATA Air AÃ§ores', 'Shenzhen Airlines', 'AirAsia', 'Alaska Airlines', \"Wideroe's Flyveselskap A/s\", 'Air Canada', 'AirAsia India', 'BA CityFlyer', 'Lufthansa', 'Ethiopian Airlines', 'Air Greenland', 'Mahan Air', 'Jetstar', 'Lucky Air', 'Malindo Air', 'Air Sial', 'Airblue', 'Virgin Australia', 'WestJet Encore', 'LJ Air', 'LATAM Colombia', 'Hainan Airlines', 'Tunis Air', 'China Express Airlines']\n"
     ]
    }
   ],
   "source": [
    "print(airlines)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eff2702e",
   "metadata": {},
   "source": [
    "Counting the number of airlines present in the website in the chosen day: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e18dbc34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(airlines)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8a727d1",
   "metadata": {},
   "source": [
    "Defining the function to create the initial column of the historical cancelled flights' dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b41294af",
   "metadata": {},
   "outputs": [],
   "source": [
    "#the function takes as the only argument the date of today\n",
    "def initiate_file(date_today):\n",
    "\n",
    "#the data is retreived from the day before the scraping happens\n",
    "    date_yesterday = date_today - timedelta(days=1) \n",
    "\n",
    "#opening a new csv file in writing mode, naming it and using a standard encoding\n",
    "#using the comma instead of the tab to facilitate work on the csv file in R\n",
    "    f = open('Flights.csv', 'w', encoding = 'utf-8')\n",
    "    f.write(f'{date_yesterday}\\nAirline_origin,\\tAirport_origin_for_each_airline\\n')\n",
    "\n",
    "#going through each airline from the list previously created\n",
    "    for air in airlines:\n",
    "        driver.find_element_by_link_text(air)\n",
    "        origin_airline = driver.find_element_by_link_text(air).text\n",
    "        driver.find_element_by_link_text(air).click()\n",
    "\n",
    "        for start_plane in driver.find_elements_by_class_name(\"hint\")[::2]:\n",
    "                f.write(f\"{origin_airline},{start_plane.text}\\n\") \n",
    "                \n",
    "#since some airlines have multiple pages of flight cancellations, this function runs through every page until there is no more \"Next 20\" button to push        \n",
    "        try: \n",
    "            while True:\n",
    "                driver.find_element_by_link_text('Next 20').click()\n",
    "\n",
    "#considering every other element because we are only considering the origin\n",
    "                for start_plane in driver.find_elements_by_class_name(\"hint\")[::2]:\n",
    "                    f.write(f\"{origin_airline},{start_plane.text}\\n\")\n",
    "                time.sleep(3)\n",
    "\n",
    "#when the pages of a certain ailine finish, the driver goes back to the main page\n",
    "        except:\n",
    "            driver.get(url)\n",
    "            time.sleep(3)     \n",
    "       \n",
    "        \n",
    "        time.sleep(3)\n",
    "\n",
    "#after all the data from every airline is printed into the csv file, the code closes the document\n",
    "    f.close()   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9714212d",
   "metadata": {},
   "source": [
    "Function to be called only one time (at the beginning of the dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "069f789d",
   "metadata": {},
   "outputs": [],
   "source": [
    "initiate_file(date.today())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3f961e5",
   "metadata": {},
   "source": [
    "Defining the function to append the same kind of data as before, but everyday"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c5f9ebd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#the function takes as the only argument the date of today\n",
    "def get_data(date_today):\n",
    "\n",
    "#the data is retreived from the day before the scraping happens\n",
    "    date_yesterday = date_today - timedelta(days=1) \n",
    "\n",
    "#opening a new csv file in append mode, directing to the right file, same e\n",
    "    f = open('Flights.csv', 'a', encoding = 'utf-8')\n",
    "\n",
    "#going through each airline from the list previously created\n",
    "    for air in airlines:\n",
    "        driver.find_element_by_link_text(air)\n",
    "        origin_airline = driver.find_element_by_link_text(air).text\n",
    "        driver.find_element_by_link_text(air).click()\n",
    "\n",
    "        for start_plane in driver.find_elements_by_class_name(\"hint\")[::2]:\n",
    "                f.write(f\"{origin_airline},{start_plane.text}\\n\") \n",
    "                \n",
    "#since some airlines have multiple pages of flight cancellations, this function runs through every page until there is no more \"Next 20\" button to push        \n",
    "        try: \n",
    "            while True:\n",
    "                driver.find_element_by_link_text('Next 20').click()\n",
    "\n",
    "#considering every other element because we are only considering the origin\n",
    "                for start_plane in driver.find_elements_by_class_name(\"hint\")[::2]:\n",
    "                    f.write(f\"{origin_airline},{start_plane.text}\\n\")\n",
    "                time.sleep(3)\n",
    "\n",
    "#when the pages of a certain ailine finish, the driver goes back to the main page\n",
    "        except:\n",
    "            driver.get(url)\n",
    "            time.sleep(3)     \n",
    "       \n",
    "        \n",
    "        time.sleep(3)\n",
    "\n",
    "#after all the data from every airline is printed into the csv file, the code closes the document\n",
    "    f.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0355c5ce",
   "metadata": {},
   "source": [
    "Function to be called everyday at anytime e.g. 12:00 a.m. because the data is from yesterday"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da7a8818",
   "metadata": {},
   "outputs": [],
   "source": [
    "get_data(date.today())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
